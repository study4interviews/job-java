method,LinkedList,ArrayList
implementation,doubly-linked list,dynamically re-sizing array
get(int index),O(N) (평균적으로 O(N/4). 하지만 index가 시작이거나 끝일 땐 O(1)),O(1) + cache hit && cache miss
add(E element),"O(1). add(int index, E element) 에서 index == list.size()인 special case",O(1) amortized (배열의 re-sizing을 N에 비례해서 늘릴 경우 일반적으로 2N으로 re-sizing). worst-case O(N) (배열이 꽉차서 새로 생성 후 원소를 복사해야 하는 경우)
"add(int index, E element)",O(N) (평균적으로 O(N/4). 하지만 index가 시작이거나 끝일 땐 O(1)),O(N) (평균적으로 O(N/2). 하지만 index가 끝일 땐 O(1))
remove(int index),O(N) (평균적으로 O(N/4). 하지만 index가 시작이거나 끝일 땐 O(1)),O(N) (평균적으로 O(N/2). 하지만 index가 끝일 땐 O(1))
Iterator.remove(),O(1),O(N) (평균적으로 O(N/2))
Iterator.add(),O(1),O(N) (평균적으로 O(N/2))